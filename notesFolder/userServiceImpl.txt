package com.project.mutualDivorce.Service;

import com.project.mutualDivorce.Dto.UserDto;
import com.project.mutualDivorce.Entity.Role;
import com.project.mutualDivorce.Entity.User;
import com.project.mutualDivorce.Repository.RoleRepository;
import com.project.mutualDivorce.Repository.UserRepository;
import jakarta.validation.Valid;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
@Service

public class UserServiceImpl implements UserService {

    private UserRepository userRepository;
    private RoleRepository roleRepository;
    private PasswordEncoder passwordEncoder;
    public UserServiceImpl(UserRepository userRepository,
                           RoleRepository roleRepository,
                           PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
        this.passwordEncoder = passwordEncoder;
    }
    @Override
    public void saveUser(@Valid UserDto userDto) {
        User user = new User();
        user.setSurname(userDto.getSurname());
        user.setAfm(userDto.getAfm());
        user.setAmka(userDto.getAmka());
        user.setPassword(userDto.getPassword());
        user.setId(userDto.getId());
        // encrypt the password using spring security
        user.setPassword(passwordEncoder.encode(userDto.getPassword()));

        Role role = roleRepository.findByName("ROLE_ADMIN");
        if(role == null){
            role = checkRoleExist();
        }
        user.setRoles(Arrays.asList(role));
        userRepository.save(user);
    }

    @Override
    public User findUserByEmail(String email) {
        return userRepository.findBySurname(email);
    }

    @Override
    public List<UserDto> findAllUsers() {
        List<User> users = userRepository.findAll();
        return users.stream()
                .map((user) -> mapToUserDto(user))
                .collect(Collectors.toList());
    }
    private UserDto mapToUserDto(User user) {
        UserDto userDto = new UserDto();
        String[] str = new String[]{user.getSurname()};
        userDto.setSurname(str[0]);
        userDto.setAfm(str[1]);
        userDto.setAmka(str[2]);

        return userDto;
    }
    private Role checkRoleExist(){
        Role role = new Role();
        role.setUsername("ROLE_ADMIN");
        return roleRepository.save(role);
    }
}
